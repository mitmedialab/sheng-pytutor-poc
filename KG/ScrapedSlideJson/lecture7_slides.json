[
    {
        "slide 0": "DECOMPOSITION, \nABSTRACTION, FUNCTIONS\n(download slides and . pyfiles to follow along)\n6.100L Lecture 7\nAna Bell"
    },
    {
        "slide 1": "AN EXAMPLE: the SMARTPHONE\n\uf0a7A black box, and can be viewed in terms of\n\uf0a7Its inputs \n\uf0a7Its outputs\n\uf0a7How outputs are related to inputs, without any \nknowledge of its internal workings\n\uf0a7Implementation is \u201copaque\u201d (or black)\n6.100L Lecture 7\n"
    },
    {
        "slide 2": "AN EXAMPLE: the SMARTPHONE\nABSTRACTION\n\uf0a7User doesn\u2019t know the details of how it \nworks\n\uf0a7We don\u2019t need to know how something works in \norder to know how to use it\n\uf0a7User does know the interface\n\uf0a7Device converts a sequence of screen touches and \nsounds into expected useful functionality\n\uf0a7Know relationship between input and output\n6.100L Lecture 7\n"
    },
    {
        "slide 3": "ABSTRACTION ENABLES \nDECOMPOSITION\n\uf0a7100\u2019s of distinct parts\n\uf0a7Designed and made by different \ncompanies\n\uf0a7Do not communicate with each other, \nother than specifications for components\n\uf0a7May use same subparts as others\n\uf0a7Each component maker has to know \nhow its component interfaces to other \ncomponents\n\uf0a7Each component maker can solve sub -\nproblems independent of other parts , \nso long as they provide specified inputs\n\uf0a7True for hardware and for software\n6.100L Lecture 7\n"
    },
    {
        "slide 4": "BIG  IDEA\nApply \nabstraction (black box) and \ndecomposition (split into self -contained parts)\nto programming!\n6.100L Lecture 7"
    },
    {
        "slide 5": "SUPPRESS DETAILS with \nABSTRACTION\n\uf0a7In programming, want to think of piece of code as black box\n\uf0a7Hide tedious coding details from the user\n\uf0a7Reuse black box at different parts in the code (no copy/pasting!)\n\uf0a7Coder creates details , and designs interface\n\uf0a7User does not need or want to see details\n6.100L Lecture 7\n"
    },
    {
        "slide 6": "SUPPRESS DETAILS with \nABSTRACTION\n\uf0a7Coder achieves abstraction with a function (or procedure)\n\uf0a7You\u2019ve already been using functions!\n\uf0a7A function lets us capture code within a black box\n\uf0a7Once we create function, it will produce an output from inputs, while \nhiding details of how it does the computation\n6.100L Lecture 7max(1,4)\nabs(-3)len(\"mom's spaghetti\")"
    },
    {
        "slide 7": "SUPPRESS DETAILS with \nABSTRACTION\n\uf0a7A function has specifications , captured using docstrings\n\uf0a7Think of a docstring as \u201ccontract\u201d between coder and user:\n\uf0a7If user provides input that satisfies stated conditions, function will \nproduce output according to specs, including indicated side effects\n\uf0a7Not typically enforced in Python (we\u2019ll see assertions later), but user \nrelies on coder\u2019s work satisfying the contract\n6.100L Lecture 7abs(-3)\n"
    },
    {
        "slide 8": "CREATE STRUCTURE with \nDECOMPOSITION\n\uf0a7Given the idea of black box abstraction, use it to divide code \ninto modules that are:\n\uf0a7Self-contained\n\uf0a7Intended to be reusable\n\uf0a7Modules are used to:\n\uf0a7Break up code into logical pieces\n\uf0a7Keep code organized\n\uf0a7Keep code coherent (readable and understandable)\n\uf0a7In this lecture, achieve decomposition with functions\n\uf0a7In a few lectures, achieve decomposition with classes\n\uf0a7Decomposition relies on abstraction to enable construction of complex modules from simpler ones\n6.100L Lecture 7\n"
    },
    {
        "slide 9": "FUNCTIONS\n\uf0a7Reusable pieces of code, called functions orprocedures\n\uf0a7Capture steps of a computation so that we can use with any \ninput\n\uf0a7A function is just some code written in a special, reusable way\n6.100L Lecture 7\n"
    },
    {
        "slide 10": "FUNCTIONS\n\uf0a7Defining a function tells Python some code now exists in \nmemory\n\uf0a7Functions are only useful when they are run(\u201ccalled \u201d or \n\u201cinvoked \u201d)\n\uf0a7You write a function once but can run it many times!\n\uf0a7Compare to code in a file\n\uf0a7It doesn\u2019t run when you load the file\n\uf0a7It runs when you hit the run button\n6.100L Lecture 7\n"
    },
    {
        "slide 11": "FUNCTION CHARACTERISTICS\n\uf0a7Has a name \n\uf0a7(think: variable bound to a function object)\n\uf0a7Has (formal) parameters (0 or more)\n\uf0a7The inputs\n\uf0a7Has a docstring (optional but recommended)\n\uf0a7A comment delineated by \"\"\" (triple quotes) that provides a \nspecification for the function \u2013contract relating output to input\n\uf0a7Has a body , a set of instructions to execute when function is \ncalled\n\uf0a7Returns something\n\uf0a7Keyword return\n6.100L Lecture 7"
    },
    {
        "slide 12": "HOW to WRITE a FUNCTION\n6.100L Lecture 7def is_even( i):\n\"\"\" \nInput: i, a positive int\nReturns True if i is even, otherwise False\n\"\"\"if i%2 == 0:\nreturnTrue\nelse:\nreturnFalse"
    },
    {
        "slide 13": "HOW TO THINK ABOUT WRITING \nA FUNCTION\n\uf0a7What is the problem?\n\uf0a7Given an int, call it i, want to know if it is even\n\uf0a7Use this to write the function name and specs\n6.100L Lecture 7defis_even( i):\n\"\"\" \nInput: i, a positive int\nReturns True if iis even, otherwise False\n\"\"\""
    },
    {
        "slide 14": "HOW TO THINK ABOUT WRITING \nA FUNCTION\n\uf0a7How to solve the problem?\n\uf0a7Can check that remainder when divided by 2 is 0\n\uf0a7Think about what value you need to give back \n6.100L Lecture 7def is_even( i ):\n\"\"\" \nInput: i, a positive int\nReturns True if i is even, otherwise False\n\"\"\"if i%2 == 0:\nreturn True\nelse:return False"
    },
    {
        "slide 15": "HOW TO THINK ABOUT WRITING \nA FUNCTION\n\uf0a7Can you make the code cleaner ?\n\uf0a7i%2 == 0 is a Boolean that evaluates to True/False already\n6.100L Lecture 7def is_even( i ):\n\"\"\" \nInput: i, a positive int\nReturns True if i is even, otherwise False\n\"\"\"return i%2 == 0"
    },
    {
        "slide 16": "BIG  IDEA\nAt this point, all we\u2019ve \ndone is make a function object\n6.100L Lecture 7"
    },
    {
        "slide 17": "HOW TO CALL (INVOKE) A \nFUNCTION\nis_even(3)\nis_even(8)\n\uf0a7That\u2019s all!\n6.100L Lecture 7"
    },
    {
        "slide 18": "HOW TO CALL (INVOKE) A \nFUNCTION\nis_even(3)\nis_even(8)\n\uf0a7That\u2019s all!\n6.100L Lecture 7"
    },
    {
        "slide 19": "ALL TOGETHER IN A FILE\n\uf0a7This code might be in one file\ndefis_even( i):\nreturni%2 == 0\nis_even(3)\n6.100L Lecture 7"
    },
    {
        "slide 20": "WHAT HAPPENS when you CALL a \nFUNCTION?\n\uf0a7Python replaces:\nformal parameters in function def with values from function call\ni replaced with                         3\ndefis_even( i):\nreturni%2 == 0\nis_even(3)\n6.100L Lecture 7"
    },
    {
        "slide 21": "WHAT HAPPENS when you CALL a \nFUNCTION?\n\uf0a7Python replaces:\nformal parameters in function def with values from function call\ni replaced with                         3\n\uf0a7Python executes expressions in the body of the function\n\uf0a7return 3%2 == 0\ndefis_even( i):\nreturni%2 == 0\nis_even(3)\n6.100L Lecture 7"
    },
    {
        "slide 22": "WHAT HAPPENS when you CALL a \nFUNCTION?\n\uf0a7Python replaces:\nformal parameters in function def with values from function call\ni replaced with                         3\ndefis_even( i):\nreturni%2 == 0\nis_even(3)\nprint(is_even(3))\n6.100L Lecture 7"
    },
    {
        "slide 23": "BIG  IDEA\nA function\u2019s code \nonly runs when you call \n(aka invoke) the function\n6.100L Lecture 7"
    },
    {
        "slide 24": "YOU TRY IT!\n\uf0a7Write code that satisfies the following specs\ndef div_by(n, d):\n\"\"\" n and d are ints > 0\nReturns True if d divides n evenly and False otherwise \"\"\"\nCall your function with:\n\uf0a7n = 10 and d = 3\n\uf0a7n = 195 and d = 13\n6.100L Lecture 7"
    },
    {
        "slide 25": "Program Scope\nabca = 3\nb = 4\nc = a+bZOOMING OUT\n(no functions)\n6.100L Lecture 73\n4\n7"
    },
    {
        "slide 26": "Program Scope\nis_evendefis_even( i):\nprint(\"inside is_even\" )\nreturni%2 == 0\na = is_even(3)\nb = is_even(10)\nc = is_even(123456)ZOOMING OUT\n6.100L Lecture 7Some \ncodefunction \nobject\nThis is my \u201cblack box\u201d\nThis is me telling my black box to do \nsomething"
    },
    {
        "slide 27": "Program Scope\nis_evenadefis_even( i):\nprint(\"inside is_even\" )\nreturni%2 == 0\na = is_even(3)\nb = is_even(10)\nc = is_even(123456)ZOOMING OUT\n6.100L Lecture 7Some \ncodefunction \nobjectThis is my \u201cblack box\u201d\nOne function callFalse"
    },
    {
        "slide 28": "Program Scope\nis_evenabdefis_even( i):\nprint(\"inside is_even\" )\nreturni%2 == 0\na = is_even(3)\nb = is_even(10)\nc = is_even(123456)ZOOMING OUT\n6.100L Lecture 7Some \ncodefunction \nobjectThis is my \u201cblack box\u201d\nOne function callFalse\nTrue"
    },
    {
        "slide 29": "Program Scope\nis_evenabcdefis_even( i):\nprint(\"inside is_even\" )\nreturni%2 == 0\na = is_even(3)\nb = is_even(10)\nc = is_even(123456)ZOOMING OUT\n6.100L Lecture 7Some \ncodefunction \nobjectThis is my \u201cblack box\u201d\nOne function callFalse\nTrue\nTrue"
    },
    {
        "slide 30": "INSERTING FUNCTIONS IN CODE\n\uf0a7Remember how expressions are replaced with the value? \n\uf0a7The function call is replaced with the return value !\nprint(\"Numbers between 1 and 10: even or odd\")\nforiinrange(1,10):\nifis_even(i ):\nprint(i, \"even\")\nelse:\nprint(i, \"odd\")\n6.100L Lecture 7"
    },
    {
        "slide 31": "ANOTHER EXAMPLE\n\uf0a7Suppose we want to add all the odd integers between (and \nincluding) aand b\n\uf0a7What is the input?\n\uf0a7Values for a and b\n\uf0a7What is the output?\n\uf0a7The sum_of_odds\n6.100L Lecture 7def sum_odd(a, b):\n# your code here\nreturn sum_of_odds"
    },
    {
        "slide 32": "BIG  IDEA\nDon\u2019t write code right \naway!\n6.100L Lecture 7"
    },
    {
        "slide 33": "PAPER FIRST\n\uf0a7Suppose we want to add all the odd integers between (and \nincluding) aand b\n\uf0a7Start with a simple \nexample on paper\n\uf0a7Systematically solve \nthe example\n6.100L Lecture 7def sum_odd(a, b):\n# your code here\nreturn sum_of_odds"
    },
    {
        "slide 34": "SIMPLE TEST CASE\n\uf0a7Suppose we want to add all the odd integers between (and \nincluding) aand b\n\uf0a7Start with a simple \nexample on paper\n\uf0a7a = 2 and b = 4\n\uf0a7sum_of_odds should be 3\n6.100L Lecture 7def sum_odd(a, b):\n# your code here\nreturn sum_of_odds\n2 3 4\na b"
    },
    {
        "slide 35": "MORE COMPLEX TEST CASE\n\uf0a7Suppose we want to add all the odd integers between (and \nincluding) aand b\n\uf0a7Start with a simple \nexample on paper\n\uf0a7a = 2 and b = 7\n\uf0a7sum_of_odds should be 15\n6.100L Lecture 7def sum_odd(a, b):\n# your code here\nreturn sum_of_odds\n2 3 7\na b4 5 6"
    },
    {
        "slide 36": "SOLVE SIMILAR PROBLEM\n\uf0a7Start by looking at each number between (and including) a and b\n\uf0a7A similar problem that is\neasier that you know how to do?\n\uf0a7Add ALLnumbers between \n(and including) a and b\n\uf0a7Start with this\n6.100L Lecture 7def sum_odd(a, b):\n# your code here\nreturn sum_of_odds2 3 4\na b"
    },
    {
        "slide 37": "CHOOSE BIG -PICTURE STRUCTURE\n\uf0a7Add ALLnumbers between \n(and including) a and b\n\uf0a7It\u2019s a loop\n\uf0a7while or for?\n\uf0a7Your choice\n6.100L Lecture 7def sum_odd(a, b):\n# your code here\nreturn sum_of_odds2 3 4\na b"
    },
    {
        "slide 38": "WRITE the LOOP\n(for adding all numbers)\nfor LOOP while LOOP\n6.100L Lecture 72 3 4\na b\ndef sum_odd(a, b):\ni= a\nwhile i<= b:\n# do something\ni+= 1\nreturn sum_of_oddsdef sum_odd(a, b):\nfor iin range(a, b):\n# do something\nreturn sum_of_odds"
    },
    {
        "slide 39": "DO the SUMMING\n(for adding all numbers)\nfor LOOP while LOOP\n6.100L Lecture 72 3 4\na b\ndef sum_odd(a, b):\ni= a\nwhile i<= b:\nsum_of_odds += i\ni+= 1\nreturn sum_of_oddsdef sum_odd(a, b):\nfor iin range(a, b):\nsum_of_odds += i\nreturn sum_of_odds"
    },
    {
        "slide 40": "INITIALIZE the SUM\n(for adding all numbers)\nfor LOOP while LOOP\n6.100L Lecture 72 3 4\na b\ndef sum_odd(a, b):\nsum_of_odds = 0\ni= a\nwhile i<= b:\nsum_of_odds += i\ni+= 1\nreturn sum_of_oddsdef sum_odd(a, b):\nsum_of_odds = 0\nfor iin range(a, b):\nsum_of_odds += i\nreturn sum_of_odds"
    },
    {
        "slide 41": "TEST!\n(for adding all numbers)\nfor LOOP while LOOP\n6.100L Lecture 72 3 4\na b\ndef sum_odd(a, b):\nsum_of_odds = 0\ni= a\nwhile i<= b:\nsum_of_odds += i\ni+= 1\nreturn sum_of_odds\nprint(sum_odd(2,4)) def sum_odd(a, b):\nsum_of_odds = 0\nfor iin range(a, b):\nsum_of_odds += i\nreturn sum_of_odds\nprint(sum_odd(2,4)) "
    },
    {
        "slide 42": "WEIRD RESULTS\u2026\n(for adding all numbers)\nfor LOOP while LOOP\n6.100L Lecture 72 3 4\na b\ndef sum_odd(a, b):\nsum_of_odds = 0\ni= a\nwhile i<= b:\nsum_of_odds += i\ni+= 1\nreturn sum_of_odds\nprint(sum_odd(2,4)) def sum_odd(a, b):\nsum_of_odds = 0\nfor iin range(a, b):\nsum_of_odds += i\nreturn sum_of_odds\nprint(sum_odd(2,4)) \n5 9"
    },
    {
        "slide 43": "DEBUG! aka ADD PRINT STATEMENTS\n(for adding all numbers)\nfor LOOP while LOOP\n6.100L Lecture 72 3 4\na b\ndef sum_odd(a, b):\nsum_of_odds = 0\ni= a\nwhile i<= b:\nsum_of_odds += i\nprint(i, sum_of_odds)\ni+= 1\nreturn sum_of_odds\nprint(sum_odd(2,4)) def sum_odd(a, b):\nsum_of_odds = 0\nfor iin range(a, b):\nsum_of_odds += i\nprint(i, sum_of_odds)\nreturn sum_of_odds\nprint(sum_odd(2,4)) \n5 92 2\n3 52 23 54 9"
    },
    {
        "slide 44": "FIX for LOOP END INDEX\n(for adding all numbers)\nfor LOOP while LOOP\n6.100L Lecture 72 3 4\na b\ndef sum_odd(a, b):\nsum_of_odds = 0\ni= a\nwhile i<= b:\nsum_of_odds += i\nprint(i, sum_of_odds)\ni+= 1\nreturn sum_of_odds\nprint(sum_odd(2,4)) def sum_odd(a, b):\nsum_of_odds = 0\nfor iin range(a, b+1):\nsum_of_odds += i\nprint(i, sum_of_odds)\nreturn sum_of_odds\nprint(sum_odd(2,4)) \n9 9"
    },
    {
        "slide 45": "ADD IN THE ODD PART!\nfor LOOP while LOOP\n6.100L Lecture 72 3 4\na b\ndef sum_odd(a, b):\nsum_of_odds = 0\ni= a\nwhile i<= b:\nif i%2 == 1:\nsum_of_odds += i\nprint(i, sum_of_odds)\ni+= 1\nreturn sum_of_odds\nprint(sum_odd(2,4)) def sum_odd(a, b):\nsum_of_odds = 0\nfor iin range(a, b+1):\nif i%2 == 1:\nsum_of_odds += i\nprint(i, sum_of_odds)\nreturn sum_of_odds\nprint(sum_odd(2,4)) \n3 3"
    },
    {
        "slide 46": "BIG  IDEA\nSolve a simpler problem \nfirst.\nAdd functionality to the code later.\n6.100L Lecture 7"
    },
    {
        "slide 47": "TRY IT ON ANOTHER \nEXAMPLE\nfor LOOP while LOOP\n6.100L Lecture 7def sum_odd(a, b):\nsum_of_odds = 0\ni= a\nwhile i<= b:\nif i%2 == 1:\nsum_of_odds += i\ni+= 1\nreturn sum_of_odds\nprint(sum_odd(2,7)) def sum_odd(a, b):\nsum_of_odds = 0\nfor iin range(a, b+1):\nif i%2 == 1:\nsum_of_odds += i\nreturn sum_of_odds\nprint(sum_odd(2,7)) \n15 152 3 7\na b4 5 6"
    },
    {
        "slide 48": "PYTHON TUTOR\n\uf0a7Also a great debugging tool\n6.100L Lecture 7"
    },
    {
        "slide 49": "BIG  IDEA\nTest code often. \nUse print to debug.\n6.100L Lecture 7"
    },
    {
        "slide 50": "YOU TRY IT!\n\uf0a7Write code that satisfies the following specs\ndef is_palindrome(s):\n\"\"\" s is a string\nReturns True if s is a palindrome and False otherwise\n\"\"\"\nFor example:\n\uf0a7If s = \"222\" returns True\n\uf0a7If s = \"2222\" returns True\n\uf0a7If s = \"abc \" returns False\n6.100L Lecture 7"
    },
    {
        "slide 51": "SUMMARY\n\uf0a7Functions allow us to suppress detail from a user\n\uf0a7Functions capture computation within a black box\n\uf0a7A programmer writes functions with\n\uf0a70 or more inputs\n\uf0a7Something to return\n\uf0a7A function only runs when it is called\n\uf0a7The entire function call is replaced with the return value\n\uf0a7Think expressions! And how you replace an entire expression with the \nvalue it evaluates to.\n6.100L Lecture 7"
    }
]